include:
    - project: "epi2melabs/ci-templates"
      file: "push-github.yaml"
    - project: "epi2melabs/ci-templates"
      file: "push-conda.yaml"

variables:
    GIT_SUBMODULE_STRATEGY: recursive

image: ${UBUNTUIMAGE}:20.04

.prep-image: &prep-image |
    export DEBIAN_FRONTEND=noninteractive
    apt update -qq
    apt install -y --no-install-recommends gcc autoconf valgrind make curl wget zlib1g-dev libbz2-dev libreadline-dev libssl-dev libffi-dev liblzma-dev libcurl4-gnutls-dev

.minimal-python: &minimal-python |
    export DEBIAN_FRONTEND=noninteractive
    apt-get update -qq && apt-get install -y -qq python3-all-dev python3-venv


stages:
    - test
    - prerelease
    - release

# Insist that the version in src/args.c matches the git tag
.check-C-versions: &check-C-versions |
    CVER="v"$(grep argp_program_version src/args.c | awk '{gsub("\"","",$5); gsub(";","",$5); print $5}')
    TAGVER=${CI_COMMIT_TAG}
    if [[ "${CVER}" != "${TAGVER}" ]]; then
        echo "Mismatching TAG and PACKAGE versions:"
        echo " -     TAG:'$TAGVER'"
        echo " - PACKAGE:'$CVER'"
        exit 1
    else
        echo "TAG and PACKAGE versions agree: '${CVER}'"
    fi

# Insist a CHANGELOG entry has been made for tags
.check-changelog: &check-changelog |
    TAGVER=${CI_COMMIT_TAG}
    MATCHES=$(grep -c "## \[${TAGVER}\]" CHANGELOG.md || exit 0)
    if [[ "${MATCHES}" != "1" ]]; then
        echo "Expected one match to '${CI_COMMIT_TAG}' in CHANGELOG, found ${MATCHES}"
        exit 1
    else
        echo "Found CHANGELOG.md entry for tag"
    fi

# Insist that the version in __init__.py matches the git tag
.check-py-versions: &check-py-versions |
    PYVER="v"$(grep "__version__ = " modbampy/__init__.py | awk '{gsub("\"","",$3); print $3}')
    TAGVER=${CI_COMMIT_TAG}
    if [[ "${PYVER}" != "${TAGVER}" ]]; then
        echo "Mismatching TAG and PACKAGE versions:"
        echo " -     TAG:'$PYVER'"
        echo " - PACKAGE:'$TAGVER'"
        exit 1
    else
        echo "TAG and PACKAGE versions agree: '${PYVER}'"
    fi

bld:program:
    stage: test
    before_script:
        - *prep-image
    script:
        - make modbam2bed
        - ./modbam2bed --help
        - make mem_check

deploy-checks:
    stage: prerelease
    script:
        - *check-C-versions
        - *check-py-versions
        - *check-changelog
    rules:
        - if: '$CI_COMMIT_TAG =~ /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$/'

conda:
    extends: .deploy-conda-linux
    before_script:
        - *prep-image
        - export CONDA_PKG=${CI_PROJECT_NAME}
        - export CONDA_PKG_VERSION=${CI_COMMIT_TAG/v/}
        - cd conda

conda-mac:
    extends: .deploy-conda-mac
    before_script:
        - export CONDA_PKG=${CI_PROJECT_NAME}
        - export CONDA_PKG_VERSION=${CI_COMMIT_TAG/v/}
        - cd conda

### Python

bld:py-sdist:
    stage: prerelease
    script:
        - *minimal-python
        - make sdist
    artifacts:
        paths:
            - dist/*.tar.gz

.many-linux: &many-linux-def
  image: quay.io/pypa/manylinux2010_x86_64
  stage: prerelease
  artifacts:
      paths:
          - wheelhouse/*.whl

bld:py-6:
    <<: *many-linux-def
    script:
        - ./build-wheels.sh . 6

bld:py-7:
    <<: *many-linux-def
    script:
        - ./build-wheels.sh . 7

bld:py-8:
    <<: *many-linux-def
    script:
        - ./build-wheels.sh . 8

deploy:pypi:
    stage: release
    script:
        - *minimal-python
        - make pypi_build/bin/activate
        - source pypi_build/bin/activate
        - twine upload --non-interactive dist/modbampy*.tar.gz wheelhouse/modbampy*.whl
    rules:
        - if: '$CI_COMMIT_TAG =~ /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$/'
